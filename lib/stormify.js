// Generated by CoffeeScript 1.8.0
(function() {
  var AnonymousStrategy, BearerStrategy, DataStore, assert, authorizer, createStore, getter, passport, poster, putter, remover, serializer;

  assert = require('assert');

  Array.prototype.unique = function() {
    var key, output, value, _i, _ref, _results;
    output = {};
    for (key = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
      output[this[key]] = this[key];
    }
    _results = [];
    for (key in output) {
      value = output[key];
      _results.push(value);
    }
    return _results;
  };

  Array.prototype.where = function(query) {
    var hit;
    if (typeof query !== "object") {
      return [];
    }
    hit = Object.keys(query).length;
    return this.filter(function(item) {
      var key, match, val;
      match = 0;
      for (key in query) {
        val = query[key];
        if (item[key] === val) {
          match += 1;
        }
      }
      if (match === hit) {
        return true;
      } else {
        return false;
      }
    });
  };

  Array.prototype.pushRecord = function(record) {
    if (typeof record !== "object") {
      return null;
    }
    if (!(this.where({
      id: record.id
    }).length > 0)) {
      return this.push(record);
    }
  };

  DataStore = require('./data-store');

  createStore = function(opts) {
    var store, _ref, _ref1, _ref2;
    assert((_ref = opts.store) != null ? (_ref1 = _ref.prototype) != null ? (_ref2 = _ref1.constructor) != null ? _ref2.name : void 0 : void 0 : void 0, "store must be a class definition for the DataStore");
    store = new opts.store({
      auditor: opts.auditor,
      authorizer: opts.authorizer
    });
    assert(store instanceof DataStore, "unable to instantiate store as DataStore instance");
    return store;
  };

  passport = require('passport');

  BearerStrategy = require('passport-http-bearer');

  AnonymousStrategy = require('passport-anonymous');

  passport.use(new AnonymousStrategy);

  authorizer = function(store) {
    if ((store.authorizer != null) && store.authorizer instanceof DataStore) {
      passport.use(new BearerStrategy(function(token, done) {
        var identity, session;
        token = store.authorizer.findRecord('token', token);
        if ((token != null) && token instanceof DataStore.Model) {
          identity = token.get('identity');
          session = token.get('session');
          if ((identity != null) && (session != null)) {
            return done(null, session, {
              scope: identity.get('scope')
            });
          }
        }
        return done(null, false);
      }));
      return passport.authenticate('bearer', {
        session: false
      });
    } else {
      return passport.authenticate('anonymous', {
        session: false
      });
    }
  };

  serializer = function(data) {
    var entry, _i, _len, _results;
    switch (false) {
      case !(data instanceof Array):
        _results = [];
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          entry = data[_i];
          _results.push(serializer(entry));
        }
        return _results;
      case !(data instanceof DataStore.Model):
        return data.serialize(true);
      default:
        return data;
    }
  };

  poster = function(store, type) {
    return function() {
      var err, record, requestor, _ref;
      assert(store instanceof DataStore && (type != null) && store.entities.hasOwnProperty(type), "invalid stormify.poster initialization");
      try {
        assert((this.body != null) && this.body.hasOwnProperty(type), "attempting to POST without proper '" + type + "' as root element!");
      } catch (_error) {
        err = _error;
        return this.res.send(500, {
          error: err
        });
      }
      if ((_ref = store.log) != null) {
        _ref.info({
          stormify: "poster",
          request: this.body
        }, "stormify.poster for '" + type + "'");
      }
      try {
        requestor = this.req.user;
        record = store.open(requestor).createRecord(type, this.body[type]);
      } catch (_error) {
        err = _error;
        return this.res.send(500, {
          error: err
        });
      }
      return record.save((function(_this) {
        return function(err, props) {
          var _ref1;
          if (err != null) {
            return _this.res.send(500, {
              error: err
            });
          }
          if (props != null) {
            _this.req.result = record.serialize();
            if ((_ref1 = store.log) != null) {
              _ref1.info({
                query: _this.params.id,
                result: _this.req.result
              }, 'poster results for %s', type);
            }
            return _this.next();
          } else {
            return _this.res.send(404);
          }
        };
      })(this));
    };
  };

  getter = function(store, type) {
    return function() {
      var condition, requestor, _ref;
      assert(store instanceof DataStore && (type != null) && store.entities.hasOwnProperty(type), "invalid stormify.getter initialization");
      condition = this.query.ids;
      if (condition == null) {
        condition = this.params.id;
      }
      if ((_ref = store.log) != null) {
        _ref.info({
          stormify: "getter",
          query: condition
        }, "stormify.getter for '" + type + "'");
      }
      requestor = this.req.user;
      return store.open(requestor).find(type, condition, (function(_this) {
        return function(err, matches) {
          var o, _ref1;
          if (err != null) {
            return _this.res.send(500, {
              error: err
            });
          }
          if ((matches != null) && matches.length > 0) {
            o = {};
            o[type] = serializer(matches);
            _this.req.result = o;
            if ((_ref1 = store.log) != null) {
              _ref1.info({
                query: condition,
                result: _this.req.result
              }, 'getter results for %s', type);
            }
            return _this.next();
          } else {
            return _this.res.send(404);
          }
        };
      })(this));
    };
  };

  putter = function(store, type) {
    return function() {
      var err, requestor, _ref;
      assert(store instanceof DataStore && (type != null) && store.entities.hasOwnProperty(type), "invalid stormify.poster initialization");
      try {
        assert((this.body != null) && this.body.hasOwnProperty(type), "attempting to PUT without proper '" + type + "' as root element!");
      } catch (_error) {
        err = _error;
        return this.res.send(500, {
          error: err
        });
      }
      if ((_ref = store.log) != null) {
        _ref.info({
          stormify: "putter",
          request: this.body
        }, "stormify.putter for '" + type + "'");
      }
      requestor = this.req.user;
      return store.open(requestor).updateRecord(type, this.params.id, this.body[type], (function(_this) {
        return function(err, result) {
          var _ref1;
          if (err != null) {
            return _this.res.send(500, {
              error: err
            });
          }
          if ((result != null) && result instanceof DataStore.Model) {
            _this.req.result = result.serialize();
            if ((_ref1 = store.log) != null) {
              _ref1.info({
                query: _this.params.id,
                result: _this.req.result
              }, 'putter results for %s', type);
            }
            return _this.next();
          } else {
            return _this.res.send(404);
          }
        };
      })(this));
    };
  };

  remover = function(store, type) {
    return function() {
      var requestor;
      assert(store instanceof DataStore && (type != null) && store.entities.hasOwnProperty(type), "invalid stormify.remover initialization");
      requestor = this.req.user;
      return store.open(requestor).deleteRecord(type, this.params.id, (function(_this) {
        return function(err, result) {
          var _ref;
          if (err != null) {
            return _this.res.send(500, {
              error: err
            });
          }
          if (result != null) {
            _this.req.result = result;
            if ((_ref = store.log) != null) {
              _ref.debug({
                query: _this.params.id,
                result: _this.req.result
              }, 'remover results for %s', type);
            }
            return _this.next();
          } else {
            return _this.res.send(404);
          }
        };
      })(this));
    };
  };

  module.exports = {
    createStore: createStore,
    SR: require('./stormregistry'),
    DS: DataStore,
    authorizer: authorizer,
    poster: poster,
    getter: getter,
    putter: putter,
    remover: remover
  };

  module.exports.serve = function(store, opts) {
    var baseUrl, collection, entity, name, _ref, _ref1, _ref2, _ref3, _ref4, _results;
    assert((this.post != null) && (this.get != null) && (this.put != null) && (this.del != null), "cannot stormify.serve without CRUD operators present in the running context!");
    assert(store instanceof DataStore, "cannot stormify.serve without valid instance of DataStore!");
    if ((_ref = store.log) != null) {
      _ref.info({
        method: "serve"
      }, "STORMIFYING data entities!");
    }
    baseUrl = (opts != null ? opts.baseUrl : void 0) || '';
    _ref1 = store.collections;
    _results = [];
    for (collection in _ref1) {
      entity = _ref1[collection];
      if ((_ref2 = store.log) != null) {
        _ref2.debug({
          method: "serve"
        }, "processing " + collection + "...");
      }
      if (entity.hidden) {
        continue;
      }
      if (entity.serve != null) {
        entity.serve.call(this, opts);
        if ((_ref3 = store.log) != null) {
          _ref3.info({
            method: "serve"
          }, "serving custom REST endpoint(s) for: " + collection);
        }
        if (entity.serveOverride) {
          continue;
        }
      }
      name = entity.name;
      this.get("" + baseUrl + "/" + collection, authorizer(store), getter(store, name), function() {
        return this.send(this.req.result);
      });
      this.get("" + baseUrl + "/" + collection + "/:id", authorizer(store), getter(store, name), function() {
        return this.send(this.req.result);
      });
      if (!entity.isReadOnly) {
        this.post("" + baseUrl + "/" + collection, authorizer(store), poster(store, name), function() {
          return this.send(this.req.result);
        });
        this.put("" + baseUrl + "/" + collection + "/:id", authorizer(store), putter(store, name), function() {
          return this.send(this.req.result);
        });
        this.del("" + baseUrl + "/" + collection + "/:id", authorizer(store), remover(store, name), function() {
          return this.send(204);
        });
      }
      _results.push((_ref4 = store.log) != null ? _ref4.info({
        method: "serve"
      }, "auto-generated REST endpoints at: " + baseUrl + "/" + collection) : void 0);
    }
    return _results;
  };

}).call(this);
